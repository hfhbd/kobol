{
  parserClass="app.softwork.kobol.CobolParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Cobol"
  psiImplClassSuffix="Impl"
  psiPackage="app.softwork.kobol"
  psiImplPackage="app.softwork.kobol.impl"

  elementTypeHolderClass="app.softwork.kobol.CobolTypes"
  elementTypeClass="app.softwork.kobol.CobolElementType"
  tokenTypeClass="app.softwork.kobol.CobolTokenType"

  tokens=[
    lineNumber="regexp:\r?\n\d{6}(\s|\*)"
    varName="regexp:[a-zA-Z]([\w\-_])*"
    space="regexp:\s+"
    comment="regexp:\*.*\r?\n\d{6}(\s|\*)"
    number="regexp:([+\-])?(\d+(\.\d+)?)|(\.\d+)"
    string="regexp:X?('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    any="regexp:.*\."
    twoDigits="regexp:\d{2}"
    PLUS='+'
    DOT='.'
    LP='('
    RP=')'
  ]

//  extends(".*_file")=file
}

//root ::= root_item *
//private root_item ::= !<<eof>> exps '.' {pin=1 recoverWhile=exps_recover}
root ::= program

program ::= comments idDiv [envDiv] [dataDiv] procedureDiv

comments ::= comment*

idDiv ::= IDENTIFICATION DIVISION DOT programID_clause [other]

private other ::= (author_clause | installation_clause | date_clause ) *

programID_clause ::= comments PROGRAM-ID [DOT] program_IDID DOT
program_IDID ::= varName
author_clause ::= comments AUTHOR anys
installation_clause ::= comments INSTALLATION anys
date_clause ::= comments DATE-WRITTEN anys

anys ::= any *

envDiv ::=  comments ENVIRONMENT DIVISION DOT [config] [inputSection]
config ::= comments CONFIGURATION SECTION DOT [specialNames_def]
specialNames_def ::= comments SPECIAL-NAMES DOT [specialNameDeclaration* DOT]
specialNameDeclaration ::= comments specialNameEnv IS specialNameValue
specialNameEnv ::= varName
specialNameValue ::= varName

inputSection ::= comments INPUT-OUTPUT SECTION DOT [fileControl_clause]
fileControl_clause ::= comments FILE-CONTROL DOT fileConfig*
fileConfig ::= comments fileConfigSelect fileConfigAssign fileConfigStatus DOT
fileConfigSelect ::= SELECT fileID
fileID ::= varName
fileConfigAssign ::= ASSIGN [TO] fileAssignID
fileAssignID ::= varName
fileConfigStatus ::= FILE STATUS fileStatusID
fileStatusID ::= varName

dataDiv ::= comments DATA DIVISION DOT comments [fileSection] [workingStorageSection] [linkingSection]

fileSection ::= comments FILE SECTION DOT fileDescriptions*
recording_clause ::= RECORDING varName
block_clause ::= BLOCK number [RECORDS]
fileRecord ::= RECORD number [TO number]
label_clause ::= LABEL RECORD STANDARD
fileDescriptions ::= fileDescription | record_def*
fileDescription ::= comments FD fileDescriptionID recording_clause [block_clause] [fileRecord] label_clause dataRecord DOT
fileDescriptionID ::= varName
dataRecord ::= DATA RECORD varName

workingStorageSection ::= comments WORKING-STORAGE SECTION DOT stm*

stm ::= record_def | exec_sql_def
exec_sql_def ::= comments exec_sql DOT
exec_sql ::= EXEC SQL anys* END-EXEC

record_def ::= comments number [recordID] (redefines_clause | pointer_clause | pic_clause )  DOT
recordID ::= varName {
  mixin="app.softwork.kobol.named.RecordIDElementImpl"
  implements="app.softwork.kobol.named.CobolNamedElement"
}
pointer_clause ::= POINTER [VALUE literal]
redefines_clause ::= REDEFINES recordID
pic_clause ::= [occurs_clause] [PIC pic_def_clause+] [[USAGE] (COMP | COMP-3 | COMP-5)] [BINARY] [VALUE literal] [occurs_clause]
occurs_clause ::= OCCURS occurs_clause_number [TIMES] [TO occurs_clause_number_to [TIMES]] [DEPENDING ON recordID]
occurs_clause_number ::= number
occurs_clause_number_to ::= number
pictures ::= X | A | S9 | 9 | V9 | PLUS | Z | B
pic_def_clause ::= pictures [length]

length ::= LP number RP

linkingSection ::= LINKAGE SECTION DOT record_def*

procedureDiv ::= comments PROCEDURE DIVISION [USING recordID] DOT [sentences+] [procedureSection*] endComments
endComments ::= comments
procedureSection ::= comments sectionID SECTION DOT sentences
sentences ::= procedures+ DOT
procedures ::= comments (displaying | moving | performing | if_clause | ctrl | init_clause | exec_sql | opening | closing | calling | reading | nextSentence | adding | eval | unstringing | accepting | computing | subtracting )
ctrl ::= GOBACK | CONTINUE
subtracting ::= SUBTRACT expr FROM variable
computing ::= COMPUTE variable EQUAL expr
accepting ::= ACCEPT variable FROM functionName
functionName ::= varName
unstringing ::= UNSTRING variable DELIMITED BY expr INTO variable
adding ::= ADD expr TO variable+
reading ::= READ fileDescriptionID [AT END procedures+] [NOT AT END procedures+] END-READ
nextSentence ::= NEXT SENTENCE
closing ::= CLOSE fileDescriptionID
calling ::= CALL calling_name [USING expr+]
calling_name ::= calling_name_programID | expr
calling_name_programID ::= string {
  mixin="app.softwork.kobol.named.CobolProgramIDElementImpl"
  implements="app.softwork.kobol.named.CobolNamedElement"
}
opening ::= OPEN (INPUT | OUTPUT) fileDescriptionID
init_clause ::= INITIALIZE variable+
performing ::= doWhile | while | forEach
doWhile ::= PERFORM sectionID [UNTIL boolean_expr]
while ::= PERFORM UNTIL boolean_expr procedures+ END-PERFORM
forEach ::= PERFORM VARYING variable FROM expr [forEach_by] UNTIL boolean_expr procedures+ END-PERFORM
forEach_by ::= BY expr
moving ::= MOVE expr TO variable+
if_clause ::= IF boolean_expr procedures* [if_else] END-IF
if_else ::= ELSE procedures*
eval ::= EVALUATE expr (ALSO expr)* whens* [when_other] END-EVALUATE
whens ::= comments WHEN expr (ALSO expr)* procedures*
when_other ::= comments WHEN OTHER procedures*
boolean_expr ::= boolean_expr_or | boolean_expr_and | boolean_expr_clause
boolean_expr_or ::= boolean_expr_clause OR boolean_expr
boolean_expr_and ::= boolean_expr_clause AND boolean_expr
boolean_expr_clause ::= boolean_expr_clause_left (boolean_expr_clause_nt | boolean_expr_clause_bigger | boolean_expr_clause_smaller ) boolean_expr_clause_right
boolean_expr_clause_left ::= expr
boolean_expr_clause_right ::= expr
boolean_expr_clause_nt ::= [nt] eql
boolean_expr_clause_bigger ::= bigger [eql]
boolean_expr_clause_smaller ::= smaller [eql]
nt ::= NOT
eql ::= EQUAL
expr ::= math | literal | variable | stringConcat
math ::= (literal | variable) (plus | minus) (literal | variable)
minus ::= '-'
bigger ::= '>'
smaller ::= '<'
literal ::= string | number | [ALL] SPACE | HIGH-VALUE | LOW-VALUE | ZERO | NULL

variable ::= varName [LP expr [colon expr] RP] [of_clause] {
  mixin="app.softwork.kobol.named.CobolVariableElementImpl"
  implements="app.softwork.kobol.named.CobolNamedElement"
}
of_clause ::= (OF | IN) recordID
colon ::= ':'

sectionID ::= varName {
  mixin="app.softwork.kobol.named.CobolSectionElementImpl"
  implements="app.softwork.kobol.named.CobolNamedElement"
}

displaying ::= DISPLAY stringConcat
stringConcat ::= (stringVar | variable) +
stringVar ::= string
