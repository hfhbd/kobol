{
  parserClass="app.softwork.kobol.CobolParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Cobol"
  psiImplClassSuffix="Impl"
  psiPackage="app.softwork.kobol"
  psiImplPackage="app.softwork.kobol.impl"

  elementTypeHolderClass="app.softwork.kobol.CobolTypes"
  elementTypeClass="app.softwork.kobol.CobolElementType"
  tokenTypeClass="app.softwork.kobol.CobolTokenType"

  tokens=[
    varName="regexp:[a-zA-Z]([\w|-]+[\w|_])*"
    space="regexp:\s+"
    comment="regexp:\*.*"
    number="regexp:\d+(\.\d*)?"
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    any="regexp:.*\."
    twoDigits="regexp:\d{2}"
  ]

//  extends(".*_file")=file
}

//root ::= root_item *
//private root_item ::= !<<eof>> exps '.' {pin=1 recoverWhile=exps_recover}

file ::= (line) *

line ::= program | COMMENT

program ::= idDiv [envDiv] [dataDiv] procedureDiv

DOT ::= '.'
LP ::= '('
RP ::= ')'


idDiv ::= identification division DOT programID [other]
identification ::= 'IDENTIFICATION'
division ::= 'DIVISION'

private other ::= (author | installation | date ) *

programID ::= 'PROGRAM-ID' [DOT] varName DOT
author ::= 'AUTHOR' anys
installation ::= 'INSTALLATION' anys
date ::= 'DATE-WRITTEN' anys

anys ::= any *

envDiv ::=  environment division DOT [config] [input]
environment ::= 'ENVIRONMENT'
config ::= 'CONFIGURATION' section DOT specialNames *
specialNames ::= 'SPECIAL-NAMES' DOT [(var) * DOT]
input ::= 'INPUT-OUTPUT' section DOT [fileControl]
fileControl ::= 'FILE-CONTROL' DOT
section ::= 'SECTION'

dataDiv ::= data division DOT [workingStorageSection]
data ::= 'DATA'
workingStorageSection ::= workingStorage section [DOT] (record | sa ) *
workingStorage ::= 'WORKING-STORAGE'

record ::= '01' varName [DOT] (group) * DOT
group ::= twoDigits

value ::= 'VALUE'
saLiteral ::= '77'
sa ::= saLiteral varName pic [value var] DOT
pic ::= picLiteral (picXA | [picS] pic9) [LP number RP]
picLiteral ::= 'PIC'
picXA ::= 'X' | 'A'
picS ::= 'S'
pic9 ::= '9'

procedureDiv ::= procedure division DOT [sentence*] [procedureSection*]
procedure ::= 'PROCEDURE'
procedureSection ::= varName section DOT sentence
sentence ::= procedures+ DOT
procedures ::= display | moving | performing
performing ::= perform varName
perform ::= 'PERFORM'
moving ::= move expr to varName
move ::= 'MOVE'
to ::= 'TO'

expr ::= (var | varName | stringConcat)

var ::= string | number

display ::= 'DISPLAY' stringConcat
stringConcat ::= (string | varName) +
