{
  parserClass="app.softwork.kobol.CobolParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Cobol"
  psiImplClassSuffix="Impl"
  psiPackage="app.softwork.kobol"
  psiImplPackage="app.softwork.kobol.impl"

  elementTypeHolderClass="app.softwork.kobol.CobolTypes"
  elementTypeClass="app.softwork.kobol.CobolElementType"
  tokenTypeClass="app.softwork.kobol.CobolTokenType"

  tokens=[
    varName="regexp:[a-zA-Z]([\w|-]+[\w|_])*"
    space="regexp:\s+"
    comment="regexp:\*.*"
    number="regexp:\d+(\.\d*)?"
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    any="regexp:.*\."
    twoDigits="regexp:\d{2}"
  ]

//  extends(".*_file")=file
}

//root ::= root_item *
//private root_item ::= !<<eof>> exps '.' {pin=1 recoverWhile=exps_recover}

file ::= (line) *

line ::= exp | COMMENT

exp ::= idDiv [envDiv] [dataDiv] procedureDiv

DOT ::= '.'
LP ::= '('
RP ::= ')'


idDiv ::= identification division [DOT] ( programID | author | installation | date ) *
identification ::= 'IDENTIFICATION'
division ::= 'DIVISION'

programID ::= 'PROGRAM-ID' [DOT] varName DOT
author ::= 'AUTHOR' anys
installation ::= 'INSTALLATION' anys
date ::= 'DATE-WRITTEN' anys

anys ::= any *

envDiv ::=  environment division [DOT] (config | specialNames) *
environment ::= 'ENVIRONMENT'
config ::= 'CONFIGURATION' section DOT
specialNames ::= 'SPECIAL-NAMES' [[DOT] (var) *] DOT
section ::= 'SECTION'

dataDiv ::= data division [DOT] (workingStorageSection)
data ::= 'DATA'
workingStorageSection ::= workingStorage section [DOT] (record | sa ) * DOT
workingStorage ::= 'WORKING-STORAGE'

record ::= '01' varName [DOT] (group) * DOT
group ::= twoDigits

value ::= 'VALUE'
saLiteral ::= '77'
sa ::= saLiteral varName pic [value var]
pic ::= picLiteral (picX | picS | pic9) [LP number RP]
picLiteral ::= 'PIC'
picX ::= 'X'
picS ::= 'S'
pic9 ::= '9'

procedureDiv ::= procedure division [DOT] (display | moving) * DOT

procedure ::= 'PROCEDURE'

moving ::= move (var | varName) to varName
move ::= 'MOVE'
to ::= 'TO'

var ::= string | number

display ::= 'DISPLAY' (string | varName) +
